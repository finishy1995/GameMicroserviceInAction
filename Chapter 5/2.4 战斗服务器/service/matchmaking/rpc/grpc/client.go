// Code generated by CodeGenerator. DO NOT EDIT!
//
// Source: matchmaking.proto
// Time: 2023-07-05 10:20:01

package grpc

import (
	"ProjectX/service/matchmaking/pb/matchmaking"
	"ProjectX/service/matchmaking/rpc/define"

	"context"
	"google.golang.org/grpc"
)

type grpcMatchmaking struct {
	client *grpc.ClientConn
}

func getAddress() string {
	return "127.0.0.1:6200" // TODO: 使用 etcd 查询 "rpc.account"，获取连接地址
}

func NewGrpcMatchmaking() define.Matchmaking {
	client, err := grpc.Dial(getAddress())
	if err != nil {
		return nil
	}
	return &grpcMatchmaking{
		client: client,
	}
}

func (r *grpcMatchmaking) Start(ctx context.Context, in *define.StartRequest) (*define.StartResponse, error) {
	client := matchmaking.NewMatchmakingClient(r.client)
	return client.Start(ctx, in)
}

func (r *grpcMatchmaking) Cancel(ctx context.Context, in *define.CancelRequest) (*define.CancelResponse, error) {
	client := matchmaking.NewMatchmakingClient(r.client)
	return client.Cancel(ctx, in)
}

func (r *grpcMatchmaking) Result(ctx context.Context, in *define.ResultRequest) (*define.ResultResponse, error) {
	client := matchmaking.NewMatchmakingClient(r.client)
	return client.Result(ctx, in)
}
