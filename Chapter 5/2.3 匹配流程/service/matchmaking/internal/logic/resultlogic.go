// Code generated by CodeGenerator. Not generate if exist
//
// Source: matchmaking.proto
// Time: 2023-07-05 10:20:01

package logic

import (
	"ProjectX/base"
	"ProjectX/library/contextx"
	"ProjectX/library/log"
	"ProjectX/service/matchmaking/internal/svc"
	"ProjectX/service/matchmaking/pb/matchmaking"
	"context"
)

type ResultLogic struct {
	ctx    context.Context
	svcCtx *svc.ServiceContext
	log.Logger
}

func NewResultLogic(ctx context.Context, svcCtx *svc.ServiceContext) *ResultLogic {
	return &ResultLogic{
		ctx:    ctx,
		svcCtx: svcCtx,
		Logger: log.WithContext(ctx),
	}
}

func (l *ResultLogic) Result(_ *matchmaking.ResultRequest) (*matchmaking.ResultResponse, error) {
	resp := &matchmaking.ResultResponse{
		Code: base.ErrorCodeOK,
	}

	userId := contextx.GetValueFromContext(l.ctx, base.UserId)
	if userId == "" {
		resp.Code = base.ErrorCodeInternalError
		return resp, nil
	}
	info := l.svcCtx.Pool.GetInfo(userId)
	status, _ := info.Output()
	resp.Result = status
	resp.Detail = &matchmaking.MatchResultDetails{
		Endpoint: "127.0.0.1:10010",
		Secret:   "hello",
	}

	return resp, nil
}
